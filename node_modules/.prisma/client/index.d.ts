
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model draft_order
 * 
 */
export type draft_order = $Result.DefaultSelection<Prisma.$draft_orderPayload>
/**
 * Model prospects
 * 
 */
export type prospects = $Result.DefaultSelection<Prisma.$prospectsPayload>
/**
 * Model draft_capital
 * 
 */
export type draft_capital = $Result.DefaultSelection<Prisma.$draft_capitalPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Draft_orders
 * const draft_orders = await prisma.draft_order.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Draft_orders
   * const draft_orders = await prisma.draft_order.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.draft_order`: Exposes CRUD operations for the **draft_order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Draft_orders
    * const draft_orders = await prisma.draft_order.findMany()
    * ```
    */
  get draft_order(): Prisma.draft_orderDelegate<ExtArgs>;

  /**
   * `prisma.prospects`: Exposes CRUD operations for the **prospects** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Prospects
    * const prospects = await prisma.prospects.findMany()
    * ```
    */
  get prospects(): Prisma.prospectsDelegate<ExtArgs>;

  /**
   * `prisma.draft_capital`: Exposes CRUD operations for the **draft_capital** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Draft_capitals
    * const draft_capitals = await prisma.draft_capital.findMany()
    * ```
    */
  get draft_capital(): Prisma.draft_capitalDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.17.0
   * Query Engine version: 393aa359c9ad4a4bb28630fb5613f9c281cde053
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    draft_order: 'draft_order',
    prospects: 'prospects',
    draft_capital: 'draft_capital'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "draft_order" | "prospects" | "draft_capital"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      draft_order: {
        payload: Prisma.$draft_orderPayload<ExtArgs>
        fields: Prisma.draft_orderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.draft_orderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$draft_orderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.draft_orderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$draft_orderPayload>
          }
          findFirst: {
            args: Prisma.draft_orderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$draft_orderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.draft_orderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$draft_orderPayload>
          }
          findMany: {
            args: Prisma.draft_orderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$draft_orderPayload>[]
          }
          create: {
            args: Prisma.draft_orderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$draft_orderPayload>
          }
          createMany: {
            args: Prisma.draft_orderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.draft_orderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$draft_orderPayload>[]
          }
          delete: {
            args: Prisma.draft_orderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$draft_orderPayload>
          }
          update: {
            args: Prisma.draft_orderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$draft_orderPayload>
          }
          deleteMany: {
            args: Prisma.draft_orderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.draft_orderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.draft_orderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$draft_orderPayload>
          }
          aggregate: {
            args: Prisma.Draft_orderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDraft_order>
          }
          groupBy: {
            args: Prisma.draft_orderGroupByArgs<ExtArgs>
            result: $Utils.Optional<Draft_orderGroupByOutputType>[]
          }
          count: {
            args: Prisma.draft_orderCountArgs<ExtArgs>
            result: $Utils.Optional<Draft_orderCountAggregateOutputType> | number
          }
        }
      }
      prospects: {
        payload: Prisma.$prospectsPayload<ExtArgs>
        fields: Prisma.prospectsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.prospectsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$prospectsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.prospectsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$prospectsPayload>
          }
          findFirst: {
            args: Prisma.prospectsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$prospectsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.prospectsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$prospectsPayload>
          }
          findMany: {
            args: Prisma.prospectsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$prospectsPayload>[]
          }
          create: {
            args: Prisma.prospectsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$prospectsPayload>
          }
          createMany: {
            args: Prisma.prospectsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.prospectsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$prospectsPayload>[]
          }
          delete: {
            args: Prisma.prospectsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$prospectsPayload>
          }
          update: {
            args: Prisma.prospectsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$prospectsPayload>
          }
          deleteMany: {
            args: Prisma.prospectsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.prospectsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.prospectsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$prospectsPayload>
          }
          aggregate: {
            args: Prisma.ProspectsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProspects>
          }
          groupBy: {
            args: Prisma.prospectsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProspectsGroupByOutputType>[]
          }
          count: {
            args: Prisma.prospectsCountArgs<ExtArgs>
            result: $Utils.Optional<ProspectsCountAggregateOutputType> | number
          }
        }
      }
      draft_capital: {
        payload: Prisma.$draft_capitalPayload<ExtArgs>
        fields: Prisma.draft_capitalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.draft_capitalFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$draft_capitalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.draft_capitalFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$draft_capitalPayload>
          }
          findFirst: {
            args: Prisma.draft_capitalFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$draft_capitalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.draft_capitalFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$draft_capitalPayload>
          }
          findMany: {
            args: Prisma.draft_capitalFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$draft_capitalPayload>[]
          }
          create: {
            args: Prisma.draft_capitalCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$draft_capitalPayload>
          }
          createMany: {
            args: Prisma.draft_capitalCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.draft_capitalCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$draft_capitalPayload>[]
          }
          delete: {
            args: Prisma.draft_capitalDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$draft_capitalPayload>
          }
          update: {
            args: Prisma.draft_capitalUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$draft_capitalPayload>
          }
          deleteMany: {
            args: Prisma.draft_capitalDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.draft_capitalUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.draft_capitalUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$draft_capitalPayload>
          }
          aggregate: {
            args: Prisma.Draft_capitalAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDraft_capital>
          }
          groupBy: {
            args: Prisma.draft_capitalGroupByArgs<ExtArgs>
            result: $Utils.Optional<Draft_capitalGroupByOutputType>[]
          }
          count: {
            args: Prisma.draft_capitalCountArgs<ExtArgs>
            result: $Utils.Optional<Draft_capitalCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model draft_order
   */

  export type AggregateDraft_order = {
    _count: Draft_orderCountAggregateOutputType | null
    _avg: Draft_orderAvgAggregateOutputType | null
    _sum: Draft_orderSumAggregateOutputType | null
    _min: Draft_orderMinAggregateOutputType | null
    _max: Draft_orderMaxAggregateOutputType | null
  }

  export type Draft_orderAvgAggregateOutputType = {
    id: number | null
    pick_number: number | null
  }

  export type Draft_orderSumAggregateOutputType = {
    id: number | null
    pick_number: number | null
  }

  export type Draft_orderMinAggregateOutputType = {
    id: number | null
    team_name: string | null
    pick_number: number | null
  }

  export type Draft_orderMaxAggregateOutputType = {
    id: number | null
    team_name: string | null
    pick_number: number | null
  }

  export type Draft_orderCountAggregateOutputType = {
    id: number
    team_name: number
    pick_number: number
    _all: number
  }


  export type Draft_orderAvgAggregateInputType = {
    id?: true
    pick_number?: true
  }

  export type Draft_orderSumAggregateInputType = {
    id?: true
    pick_number?: true
  }

  export type Draft_orderMinAggregateInputType = {
    id?: true
    team_name?: true
    pick_number?: true
  }

  export type Draft_orderMaxAggregateInputType = {
    id?: true
    team_name?: true
    pick_number?: true
  }

  export type Draft_orderCountAggregateInputType = {
    id?: true
    team_name?: true
    pick_number?: true
    _all?: true
  }

  export type Draft_orderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which draft_order to aggregate.
     */
    where?: draft_orderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of draft_orders to fetch.
     */
    orderBy?: draft_orderOrderByWithRelationInput | draft_orderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: draft_orderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` draft_orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` draft_orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned draft_orders
    **/
    _count?: true | Draft_orderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Draft_orderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Draft_orderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Draft_orderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Draft_orderMaxAggregateInputType
  }

  export type GetDraft_orderAggregateType<T extends Draft_orderAggregateArgs> = {
        [P in keyof T & keyof AggregateDraft_order]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDraft_order[P]>
      : GetScalarType<T[P], AggregateDraft_order[P]>
  }




  export type draft_orderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: draft_orderWhereInput
    orderBy?: draft_orderOrderByWithAggregationInput | draft_orderOrderByWithAggregationInput[]
    by: Draft_orderScalarFieldEnum[] | Draft_orderScalarFieldEnum
    having?: draft_orderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Draft_orderCountAggregateInputType | true
    _avg?: Draft_orderAvgAggregateInputType
    _sum?: Draft_orderSumAggregateInputType
    _min?: Draft_orderMinAggregateInputType
    _max?: Draft_orderMaxAggregateInputType
  }

  export type Draft_orderGroupByOutputType = {
    id: number
    team_name: string | null
    pick_number: number | null
    _count: Draft_orderCountAggregateOutputType | null
    _avg: Draft_orderAvgAggregateOutputType | null
    _sum: Draft_orderSumAggregateOutputType | null
    _min: Draft_orderMinAggregateOutputType | null
    _max: Draft_orderMaxAggregateOutputType | null
  }

  type GetDraft_orderGroupByPayload<T extends draft_orderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Draft_orderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Draft_orderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Draft_orderGroupByOutputType[P]>
            : GetScalarType<T[P], Draft_orderGroupByOutputType[P]>
        }
      >
    >


  export type draft_orderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    team_name?: boolean
    pick_number?: boolean
  }, ExtArgs["result"]["draft_order"]>

  export type draft_orderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    team_name?: boolean
    pick_number?: boolean
  }, ExtArgs["result"]["draft_order"]>

  export type draft_orderSelectScalar = {
    id?: boolean
    team_name?: boolean
    pick_number?: boolean
  }


  export type $draft_orderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "draft_order"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      team_name: string | null
      pick_number: number | null
    }, ExtArgs["result"]["draft_order"]>
    composites: {}
  }

  type draft_orderGetPayload<S extends boolean | null | undefined | draft_orderDefaultArgs> = $Result.GetResult<Prisma.$draft_orderPayload, S>

  type draft_orderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<draft_orderFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Draft_orderCountAggregateInputType | true
    }

  export interface draft_orderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['draft_order'], meta: { name: 'draft_order' } }
    /**
     * Find zero or one Draft_order that matches the filter.
     * @param {draft_orderFindUniqueArgs} args - Arguments to find a Draft_order
     * @example
     * // Get one Draft_order
     * const draft_order = await prisma.draft_order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends draft_orderFindUniqueArgs>(args: SelectSubset<T, draft_orderFindUniqueArgs<ExtArgs>>): Prisma__draft_orderClient<$Result.GetResult<Prisma.$draft_orderPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Draft_order that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {draft_orderFindUniqueOrThrowArgs} args - Arguments to find a Draft_order
     * @example
     * // Get one Draft_order
     * const draft_order = await prisma.draft_order.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends draft_orderFindUniqueOrThrowArgs>(args: SelectSubset<T, draft_orderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__draft_orderClient<$Result.GetResult<Prisma.$draft_orderPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Draft_order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {draft_orderFindFirstArgs} args - Arguments to find a Draft_order
     * @example
     * // Get one Draft_order
     * const draft_order = await prisma.draft_order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends draft_orderFindFirstArgs>(args?: SelectSubset<T, draft_orderFindFirstArgs<ExtArgs>>): Prisma__draft_orderClient<$Result.GetResult<Prisma.$draft_orderPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Draft_order that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {draft_orderFindFirstOrThrowArgs} args - Arguments to find a Draft_order
     * @example
     * // Get one Draft_order
     * const draft_order = await prisma.draft_order.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends draft_orderFindFirstOrThrowArgs>(args?: SelectSubset<T, draft_orderFindFirstOrThrowArgs<ExtArgs>>): Prisma__draft_orderClient<$Result.GetResult<Prisma.$draft_orderPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Draft_orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {draft_orderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Draft_orders
     * const draft_orders = await prisma.draft_order.findMany()
     * 
     * // Get first 10 Draft_orders
     * const draft_orders = await prisma.draft_order.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const draft_orderWithIdOnly = await prisma.draft_order.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends draft_orderFindManyArgs>(args?: SelectSubset<T, draft_orderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$draft_orderPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Draft_order.
     * @param {draft_orderCreateArgs} args - Arguments to create a Draft_order.
     * @example
     * // Create one Draft_order
     * const Draft_order = await prisma.draft_order.create({
     *   data: {
     *     // ... data to create a Draft_order
     *   }
     * })
     * 
     */
    create<T extends draft_orderCreateArgs>(args: SelectSubset<T, draft_orderCreateArgs<ExtArgs>>): Prisma__draft_orderClient<$Result.GetResult<Prisma.$draft_orderPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Draft_orders.
     * @param {draft_orderCreateManyArgs} args - Arguments to create many Draft_orders.
     * @example
     * // Create many Draft_orders
     * const draft_order = await prisma.draft_order.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends draft_orderCreateManyArgs>(args?: SelectSubset<T, draft_orderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Draft_orders and returns the data saved in the database.
     * @param {draft_orderCreateManyAndReturnArgs} args - Arguments to create many Draft_orders.
     * @example
     * // Create many Draft_orders
     * const draft_order = await prisma.draft_order.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Draft_orders and only return the `id`
     * const draft_orderWithIdOnly = await prisma.draft_order.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends draft_orderCreateManyAndReturnArgs>(args?: SelectSubset<T, draft_orderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$draft_orderPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Draft_order.
     * @param {draft_orderDeleteArgs} args - Arguments to delete one Draft_order.
     * @example
     * // Delete one Draft_order
     * const Draft_order = await prisma.draft_order.delete({
     *   where: {
     *     // ... filter to delete one Draft_order
     *   }
     * })
     * 
     */
    delete<T extends draft_orderDeleteArgs>(args: SelectSubset<T, draft_orderDeleteArgs<ExtArgs>>): Prisma__draft_orderClient<$Result.GetResult<Prisma.$draft_orderPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Draft_order.
     * @param {draft_orderUpdateArgs} args - Arguments to update one Draft_order.
     * @example
     * // Update one Draft_order
     * const draft_order = await prisma.draft_order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends draft_orderUpdateArgs>(args: SelectSubset<T, draft_orderUpdateArgs<ExtArgs>>): Prisma__draft_orderClient<$Result.GetResult<Prisma.$draft_orderPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Draft_orders.
     * @param {draft_orderDeleteManyArgs} args - Arguments to filter Draft_orders to delete.
     * @example
     * // Delete a few Draft_orders
     * const { count } = await prisma.draft_order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends draft_orderDeleteManyArgs>(args?: SelectSubset<T, draft_orderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Draft_orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {draft_orderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Draft_orders
     * const draft_order = await prisma.draft_order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends draft_orderUpdateManyArgs>(args: SelectSubset<T, draft_orderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Draft_order.
     * @param {draft_orderUpsertArgs} args - Arguments to update or create a Draft_order.
     * @example
     * // Update or create a Draft_order
     * const draft_order = await prisma.draft_order.upsert({
     *   create: {
     *     // ... data to create a Draft_order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Draft_order we want to update
     *   }
     * })
     */
    upsert<T extends draft_orderUpsertArgs>(args: SelectSubset<T, draft_orderUpsertArgs<ExtArgs>>): Prisma__draft_orderClient<$Result.GetResult<Prisma.$draft_orderPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Draft_orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {draft_orderCountArgs} args - Arguments to filter Draft_orders to count.
     * @example
     * // Count the number of Draft_orders
     * const count = await prisma.draft_order.count({
     *   where: {
     *     // ... the filter for the Draft_orders we want to count
     *   }
     * })
    **/
    count<T extends draft_orderCountArgs>(
      args?: Subset<T, draft_orderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Draft_orderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Draft_order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Draft_orderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Draft_orderAggregateArgs>(args: Subset<T, Draft_orderAggregateArgs>): Prisma.PrismaPromise<GetDraft_orderAggregateType<T>>

    /**
     * Group by Draft_order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {draft_orderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends draft_orderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: draft_orderGroupByArgs['orderBy'] }
        : { orderBy?: draft_orderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, draft_orderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDraft_orderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the draft_order model
   */
  readonly fields: draft_orderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for draft_order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__draft_orderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the draft_order model
   */ 
  interface draft_orderFieldRefs {
    readonly id: FieldRef<"draft_order", 'Int'>
    readonly team_name: FieldRef<"draft_order", 'String'>
    readonly pick_number: FieldRef<"draft_order", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * draft_order findUnique
   */
  export type draft_orderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the draft_order
     */
    select?: draft_orderSelect<ExtArgs> | null
    /**
     * Filter, which draft_order to fetch.
     */
    where: draft_orderWhereUniqueInput
  }

  /**
   * draft_order findUniqueOrThrow
   */
  export type draft_orderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the draft_order
     */
    select?: draft_orderSelect<ExtArgs> | null
    /**
     * Filter, which draft_order to fetch.
     */
    where: draft_orderWhereUniqueInput
  }

  /**
   * draft_order findFirst
   */
  export type draft_orderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the draft_order
     */
    select?: draft_orderSelect<ExtArgs> | null
    /**
     * Filter, which draft_order to fetch.
     */
    where?: draft_orderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of draft_orders to fetch.
     */
    orderBy?: draft_orderOrderByWithRelationInput | draft_orderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for draft_orders.
     */
    cursor?: draft_orderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` draft_orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` draft_orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of draft_orders.
     */
    distinct?: Draft_orderScalarFieldEnum | Draft_orderScalarFieldEnum[]
  }

  /**
   * draft_order findFirstOrThrow
   */
  export type draft_orderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the draft_order
     */
    select?: draft_orderSelect<ExtArgs> | null
    /**
     * Filter, which draft_order to fetch.
     */
    where?: draft_orderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of draft_orders to fetch.
     */
    orderBy?: draft_orderOrderByWithRelationInput | draft_orderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for draft_orders.
     */
    cursor?: draft_orderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` draft_orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` draft_orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of draft_orders.
     */
    distinct?: Draft_orderScalarFieldEnum | Draft_orderScalarFieldEnum[]
  }

  /**
   * draft_order findMany
   */
  export type draft_orderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the draft_order
     */
    select?: draft_orderSelect<ExtArgs> | null
    /**
     * Filter, which draft_orders to fetch.
     */
    where?: draft_orderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of draft_orders to fetch.
     */
    orderBy?: draft_orderOrderByWithRelationInput | draft_orderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing draft_orders.
     */
    cursor?: draft_orderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` draft_orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` draft_orders.
     */
    skip?: number
    distinct?: Draft_orderScalarFieldEnum | Draft_orderScalarFieldEnum[]
  }

  /**
   * draft_order create
   */
  export type draft_orderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the draft_order
     */
    select?: draft_orderSelect<ExtArgs> | null
    /**
     * The data needed to create a draft_order.
     */
    data?: XOR<draft_orderCreateInput, draft_orderUncheckedCreateInput>
  }

  /**
   * draft_order createMany
   */
  export type draft_orderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many draft_orders.
     */
    data: draft_orderCreateManyInput | draft_orderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * draft_order createManyAndReturn
   */
  export type draft_orderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the draft_order
     */
    select?: draft_orderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many draft_orders.
     */
    data: draft_orderCreateManyInput | draft_orderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * draft_order update
   */
  export type draft_orderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the draft_order
     */
    select?: draft_orderSelect<ExtArgs> | null
    /**
     * The data needed to update a draft_order.
     */
    data: XOR<draft_orderUpdateInput, draft_orderUncheckedUpdateInput>
    /**
     * Choose, which draft_order to update.
     */
    where: draft_orderWhereUniqueInput
  }

  /**
   * draft_order updateMany
   */
  export type draft_orderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update draft_orders.
     */
    data: XOR<draft_orderUpdateManyMutationInput, draft_orderUncheckedUpdateManyInput>
    /**
     * Filter which draft_orders to update
     */
    where?: draft_orderWhereInput
  }

  /**
   * draft_order upsert
   */
  export type draft_orderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the draft_order
     */
    select?: draft_orderSelect<ExtArgs> | null
    /**
     * The filter to search for the draft_order to update in case it exists.
     */
    where: draft_orderWhereUniqueInput
    /**
     * In case the draft_order found by the `where` argument doesn't exist, create a new draft_order with this data.
     */
    create: XOR<draft_orderCreateInput, draft_orderUncheckedCreateInput>
    /**
     * In case the draft_order was found with the provided `where` argument, update it with this data.
     */
    update: XOR<draft_orderUpdateInput, draft_orderUncheckedUpdateInput>
  }

  /**
   * draft_order delete
   */
  export type draft_orderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the draft_order
     */
    select?: draft_orderSelect<ExtArgs> | null
    /**
     * Filter which draft_order to delete.
     */
    where: draft_orderWhereUniqueInput
  }

  /**
   * draft_order deleteMany
   */
  export type draft_orderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which draft_orders to delete
     */
    where?: draft_orderWhereInput
  }

  /**
   * draft_order without action
   */
  export type draft_orderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the draft_order
     */
    select?: draft_orderSelect<ExtArgs> | null
  }


  /**
   * Model prospects
   */

  export type AggregateProspects = {
    _count: ProspectsCountAggregateOutputType | null
    _avg: ProspectsAvgAggregateOutputType | null
    _sum: ProspectsSumAggregateOutputType | null
    _min: ProspectsMinAggregateOutputType | null
    _max: ProspectsMaxAggregateOutputType | null
  }

  export type ProspectsAvgAggregateOutputType = {
    id: number | null
    ranking: number | null
  }

  export type ProspectsSumAggregateOutputType = {
    id: number | null
    ranking: number | null
  }

  export type ProspectsMinAggregateOutputType = {
    id: number | null
    position: string | null
    ranking: number | null
    name: string | null
  }

  export type ProspectsMaxAggregateOutputType = {
    id: number | null
    position: string | null
    ranking: number | null
    name: string | null
  }

  export type ProspectsCountAggregateOutputType = {
    id: number
    position: number
    ranking: number
    name: number
    _all: number
  }


  export type ProspectsAvgAggregateInputType = {
    id?: true
    ranking?: true
  }

  export type ProspectsSumAggregateInputType = {
    id?: true
    ranking?: true
  }

  export type ProspectsMinAggregateInputType = {
    id?: true
    position?: true
    ranking?: true
    name?: true
  }

  export type ProspectsMaxAggregateInputType = {
    id?: true
    position?: true
    ranking?: true
    name?: true
  }

  export type ProspectsCountAggregateInputType = {
    id?: true
    position?: true
    ranking?: true
    name?: true
    _all?: true
  }

  export type ProspectsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which prospects to aggregate.
     */
    where?: prospectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of prospects to fetch.
     */
    orderBy?: prospectsOrderByWithRelationInput | prospectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: prospectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` prospects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` prospects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned prospects
    **/
    _count?: true | ProspectsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProspectsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProspectsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProspectsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProspectsMaxAggregateInputType
  }

  export type GetProspectsAggregateType<T extends ProspectsAggregateArgs> = {
        [P in keyof T & keyof AggregateProspects]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProspects[P]>
      : GetScalarType<T[P], AggregateProspects[P]>
  }




  export type prospectsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: prospectsWhereInput
    orderBy?: prospectsOrderByWithAggregationInput | prospectsOrderByWithAggregationInput[]
    by: ProspectsScalarFieldEnum[] | ProspectsScalarFieldEnum
    having?: prospectsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProspectsCountAggregateInputType | true
    _avg?: ProspectsAvgAggregateInputType
    _sum?: ProspectsSumAggregateInputType
    _min?: ProspectsMinAggregateInputType
    _max?: ProspectsMaxAggregateInputType
  }

  export type ProspectsGroupByOutputType = {
    id: number
    position: string | null
    ranking: number | null
    name: string | null
    _count: ProspectsCountAggregateOutputType | null
    _avg: ProspectsAvgAggregateOutputType | null
    _sum: ProspectsSumAggregateOutputType | null
    _min: ProspectsMinAggregateOutputType | null
    _max: ProspectsMaxAggregateOutputType | null
  }

  type GetProspectsGroupByPayload<T extends prospectsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProspectsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProspectsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProspectsGroupByOutputType[P]>
            : GetScalarType<T[P], ProspectsGroupByOutputType[P]>
        }
      >
    >


  export type prospectsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    position?: boolean
    ranking?: boolean
    name?: boolean
  }, ExtArgs["result"]["prospects"]>

  export type prospectsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    position?: boolean
    ranking?: boolean
    name?: boolean
  }, ExtArgs["result"]["prospects"]>

  export type prospectsSelectScalar = {
    id?: boolean
    position?: boolean
    ranking?: boolean
    name?: boolean
  }


  export type $prospectsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "prospects"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      position: string | null
      ranking: number | null
      name: string | null
    }, ExtArgs["result"]["prospects"]>
    composites: {}
  }

  type prospectsGetPayload<S extends boolean | null | undefined | prospectsDefaultArgs> = $Result.GetResult<Prisma.$prospectsPayload, S>

  type prospectsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<prospectsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProspectsCountAggregateInputType | true
    }

  export interface prospectsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['prospects'], meta: { name: 'prospects' } }
    /**
     * Find zero or one Prospects that matches the filter.
     * @param {prospectsFindUniqueArgs} args - Arguments to find a Prospects
     * @example
     * // Get one Prospects
     * const prospects = await prisma.prospects.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends prospectsFindUniqueArgs>(args: SelectSubset<T, prospectsFindUniqueArgs<ExtArgs>>): Prisma__prospectsClient<$Result.GetResult<Prisma.$prospectsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Prospects that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {prospectsFindUniqueOrThrowArgs} args - Arguments to find a Prospects
     * @example
     * // Get one Prospects
     * const prospects = await prisma.prospects.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends prospectsFindUniqueOrThrowArgs>(args: SelectSubset<T, prospectsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__prospectsClient<$Result.GetResult<Prisma.$prospectsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Prospects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {prospectsFindFirstArgs} args - Arguments to find a Prospects
     * @example
     * // Get one Prospects
     * const prospects = await prisma.prospects.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends prospectsFindFirstArgs>(args?: SelectSubset<T, prospectsFindFirstArgs<ExtArgs>>): Prisma__prospectsClient<$Result.GetResult<Prisma.$prospectsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Prospects that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {prospectsFindFirstOrThrowArgs} args - Arguments to find a Prospects
     * @example
     * // Get one Prospects
     * const prospects = await prisma.prospects.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends prospectsFindFirstOrThrowArgs>(args?: SelectSubset<T, prospectsFindFirstOrThrowArgs<ExtArgs>>): Prisma__prospectsClient<$Result.GetResult<Prisma.$prospectsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Prospects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {prospectsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Prospects
     * const prospects = await prisma.prospects.findMany()
     * 
     * // Get first 10 Prospects
     * const prospects = await prisma.prospects.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const prospectsWithIdOnly = await prisma.prospects.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends prospectsFindManyArgs>(args?: SelectSubset<T, prospectsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$prospectsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Prospects.
     * @param {prospectsCreateArgs} args - Arguments to create a Prospects.
     * @example
     * // Create one Prospects
     * const Prospects = await prisma.prospects.create({
     *   data: {
     *     // ... data to create a Prospects
     *   }
     * })
     * 
     */
    create<T extends prospectsCreateArgs>(args: SelectSubset<T, prospectsCreateArgs<ExtArgs>>): Prisma__prospectsClient<$Result.GetResult<Prisma.$prospectsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Prospects.
     * @param {prospectsCreateManyArgs} args - Arguments to create many Prospects.
     * @example
     * // Create many Prospects
     * const prospects = await prisma.prospects.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends prospectsCreateManyArgs>(args?: SelectSubset<T, prospectsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Prospects and returns the data saved in the database.
     * @param {prospectsCreateManyAndReturnArgs} args - Arguments to create many Prospects.
     * @example
     * // Create many Prospects
     * const prospects = await prisma.prospects.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Prospects and only return the `id`
     * const prospectsWithIdOnly = await prisma.prospects.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends prospectsCreateManyAndReturnArgs>(args?: SelectSubset<T, prospectsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$prospectsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Prospects.
     * @param {prospectsDeleteArgs} args - Arguments to delete one Prospects.
     * @example
     * // Delete one Prospects
     * const Prospects = await prisma.prospects.delete({
     *   where: {
     *     // ... filter to delete one Prospects
     *   }
     * })
     * 
     */
    delete<T extends prospectsDeleteArgs>(args: SelectSubset<T, prospectsDeleteArgs<ExtArgs>>): Prisma__prospectsClient<$Result.GetResult<Prisma.$prospectsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Prospects.
     * @param {prospectsUpdateArgs} args - Arguments to update one Prospects.
     * @example
     * // Update one Prospects
     * const prospects = await prisma.prospects.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends prospectsUpdateArgs>(args: SelectSubset<T, prospectsUpdateArgs<ExtArgs>>): Prisma__prospectsClient<$Result.GetResult<Prisma.$prospectsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Prospects.
     * @param {prospectsDeleteManyArgs} args - Arguments to filter Prospects to delete.
     * @example
     * // Delete a few Prospects
     * const { count } = await prisma.prospects.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends prospectsDeleteManyArgs>(args?: SelectSubset<T, prospectsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Prospects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {prospectsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Prospects
     * const prospects = await prisma.prospects.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends prospectsUpdateManyArgs>(args: SelectSubset<T, prospectsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Prospects.
     * @param {prospectsUpsertArgs} args - Arguments to update or create a Prospects.
     * @example
     * // Update or create a Prospects
     * const prospects = await prisma.prospects.upsert({
     *   create: {
     *     // ... data to create a Prospects
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Prospects we want to update
     *   }
     * })
     */
    upsert<T extends prospectsUpsertArgs>(args: SelectSubset<T, prospectsUpsertArgs<ExtArgs>>): Prisma__prospectsClient<$Result.GetResult<Prisma.$prospectsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Prospects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {prospectsCountArgs} args - Arguments to filter Prospects to count.
     * @example
     * // Count the number of Prospects
     * const count = await prisma.prospects.count({
     *   where: {
     *     // ... the filter for the Prospects we want to count
     *   }
     * })
    **/
    count<T extends prospectsCountArgs>(
      args?: Subset<T, prospectsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProspectsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Prospects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProspectsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProspectsAggregateArgs>(args: Subset<T, ProspectsAggregateArgs>): Prisma.PrismaPromise<GetProspectsAggregateType<T>>

    /**
     * Group by Prospects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {prospectsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends prospectsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: prospectsGroupByArgs['orderBy'] }
        : { orderBy?: prospectsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, prospectsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProspectsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the prospects model
   */
  readonly fields: prospectsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for prospects.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__prospectsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the prospects model
   */ 
  interface prospectsFieldRefs {
    readonly id: FieldRef<"prospects", 'Int'>
    readonly position: FieldRef<"prospects", 'String'>
    readonly ranking: FieldRef<"prospects", 'Int'>
    readonly name: FieldRef<"prospects", 'String'>
  }
    

  // Custom InputTypes
  /**
   * prospects findUnique
   */
  export type prospectsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prospects
     */
    select?: prospectsSelect<ExtArgs> | null
    /**
     * Filter, which prospects to fetch.
     */
    where: prospectsWhereUniqueInput
  }

  /**
   * prospects findUniqueOrThrow
   */
  export type prospectsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prospects
     */
    select?: prospectsSelect<ExtArgs> | null
    /**
     * Filter, which prospects to fetch.
     */
    where: prospectsWhereUniqueInput
  }

  /**
   * prospects findFirst
   */
  export type prospectsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prospects
     */
    select?: prospectsSelect<ExtArgs> | null
    /**
     * Filter, which prospects to fetch.
     */
    where?: prospectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of prospects to fetch.
     */
    orderBy?: prospectsOrderByWithRelationInput | prospectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for prospects.
     */
    cursor?: prospectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` prospects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` prospects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of prospects.
     */
    distinct?: ProspectsScalarFieldEnum | ProspectsScalarFieldEnum[]
  }

  /**
   * prospects findFirstOrThrow
   */
  export type prospectsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prospects
     */
    select?: prospectsSelect<ExtArgs> | null
    /**
     * Filter, which prospects to fetch.
     */
    where?: prospectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of prospects to fetch.
     */
    orderBy?: prospectsOrderByWithRelationInput | prospectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for prospects.
     */
    cursor?: prospectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` prospects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` prospects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of prospects.
     */
    distinct?: ProspectsScalarFieldEnum | ProspectsScalarFieldEnum[]
  }

  /**
   * prospects findMany
   */
  export type prospectsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prospects
     */
    select?: prospectsSelect<ExtArgs> | null
    /**
     * Filter, which prospects to fetch.
     */
    where?: prospectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of prospects to fetch.
     */
    orderBy?: prospectsOrderByWithRelationInput | prospectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing prospects.
     */
    cursor?: prospectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` prospects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` prospects.
     */
    skip?: number
    distinct?: ProspectsScalarFieldEnum | ProspectsScalarFieldEnum[]
  }

  /**
   * prospects create
   */
  export type prospectsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prospects
     */
    select?: prospectsSelect<ExtArgs> | null
    /**
     * The data needed to create a prospects.
     */
    data?: XOR<prospectsCreateInput, prospectsUncheckedCreateInput>
  }

  /**
   * prospects createMany
   */
  export type prospectsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many prospects.
     */
    data: prospectsCreateManyInput | prospectsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * prospects createManyAndReturn
   */
  export type prospectsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prospects
     */
    select?: prospectsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many prospects.
     */
    data: prospectsCreateManyInput | prospectsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * prospects update
   */
  export type prospectsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prospects
     */
    select?: prospectsSelect<ExtArgs> | null
    /**
     * The data needed to update a prospects.
     */
    data: XOR<prospectsUpdateInput, prospectsUncheckedUpdateInput>
    /**
     * Choose, which prospects to update.
     */
    where: prospectsWhereUniqueInput
  }

  /**
   * prospects updateMany
   */
  export type prospectsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update prospects.
     */
    data: XOR<prospectsUpdateManyMutationInput, prospectsUncheckedUpdateManyInput>
    /**
     * Filter which prospects to update
     */
    where?: prospectsWhereInput
  }

  /**
   * prospects upsert
   */
  export type prospectsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prospects
     */
    select?: prospectsSelect<ExtArgs> | null
    /**
     * The filter to search for the prospects to update in case it exists.
     */
    where: prospectsWhereUniqueInput
    /**
     * In case the prospects found by the `where` argument doesn't exist, create a new prospects with this data.
     */
    create: XOR<prospectsCreateInput, prospectsUncheckedCreateInput>
    /**
     * In case the prospects was found with the provided `where` argument, update it with this data.
     */
    update: XOR<prospectsUpdateInput, prospectsUncheckedUpdateInput>
  }

  /**
   * prospects delete
   */
  export type prospectsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prospects
     */
    select?: prospectsSelect<ExtArgs> | null
    /**
     * Filter which prospects to delete.
     */
    where: prospectsWhereUniqueInput
  }

  /**
   * prospects deleteMany
   */
  export type prospectsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which prospects to delete
     */
    where?: prospectsWhereInput
  }

  /**
   * prospects without action
   */
  export type prospectsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prospects
     */
    select?: prospectsSelect<ExtArgs> | null
  }


  /**
   * Model draft_capital
   */

  export type AggregateDraft_capital = {
    _count: Draft_capitalCountAggregateOutputType | null
    _avg: Draft_capitalAvgAggregateOutputType | null
    _sum: Draft_capitalSumAggregateOutputType | null
    _min: Draft_capitalMinAggregateOutputType | null
    _max: Draft_capitalMaxAggregateOutputType | null
  }

  export type Draft_capitalAvgAggregateOutputType = {
    id: number | null
    picks: number | null
  }

  export type Draft_capitalSumAggregateOutputType = {
    id: number | null
    picks: number[]
  }

  export type Draft_capitalMinAggregateOutputType = {
    id: number | null
    team_name: string | null
  }

  export type Draft_capitalMaxAggregateOutputType = {
    id: number | null
    team_name: string | null
  }

  export type Draft_capitalCountAggregateOutputType = {
    id: number
    team_name: number
    picks: number
    _all: number
  }


  export type Draft_capitalAvgAggregateInputType = {
    id?: true
    picks?: true
  }

  export type Draft_capitalSumAggregateInputType = {
    id?: true
    picks?: true
  }

  export type Draft_capitalMinAggregateInputType = {
    id?: true
    team_name?: true
  }

  export type Draft_capitalMaxAggregateInputType = {
    id?: true
    team_name?: true
  }

  export type Draft_capitalCountAggregateInputType = {
    id?: true
    team_name?: true
    picks?: true
    _all?: true
  }

  export type Draft_capitalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which draft_capital to aggregate.
     */
    where?: draft_capitalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of draft_capitals to fetch.
     */
    orderBy?: draft_capitalOrderByWithRelationInput | draft_capitalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: draft_capitalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` draft_capitals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` draft_capitals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned draft_capitals
    **/
    _count?: true | Draft_capitalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Draft_capitalAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Draft_capitalSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Draft_capitalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Draft_capitalMaxAggregateInputType
  }

  export type GetDraft_capitalAggregateType<T extends Draft_capitalAggregateArgs> = {
        [P in keyof T & keyof AggregateDraft_capital]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDraft_capital[P]>
      : GetScalarType<T[P], AggregateDraft_capital[P]>
  }




  export type draft_capitalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: draft_capitalWhereInput
    orderBy?: draft_capitalOrderByWithAggregationInput | draft_capitalOrderByWithAggregationInput[]
    by: Draft_capitalScalarFieldEnum[] | Draft_capitalScalarFieldEnum
    having?: draft_capitalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Draft_capitalCountAggregateInputType | true
    _avg?: Draft_capitalAvgAggregateInputType
    _sum?: Draft_capitalSumAggregateInputType
    _min?: Draft_capitalMinAggregateInputType
    _max?: Draft_capitalMaxAggregateInputType
  }

  export type Draft_capitalGroupByOutputType = {
    id: number
    team_name: string
    picks: number[]
    _count: Draft_capitalCountAggregateOutputType | null
    _avg: Draft_capitalAvgAggregateOutputType | null
    _sum: Draft_capitalSumAggregateOutputType | null
    _min: Draft_capitalMinAggregateOutputType | null
    _max: Draft_capitalMaxAggregateOutputType | null
  }

  type GetDraft_capitalGroupByPayload<T extends draft_capitalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Draft_capitalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Draft_capitalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Draft_capitalGroupByOutputType[P]>
            : GetScalarType<T[P], Draft_capitalGroupByOutputType[P]>
        }
      >
    >


  export type draft_capitalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    team_name?: boolean
    picks?: boolean
  }, ExtArgs["result"]["draft_capital"]>

  export type draft_capitalSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    team_name?: boolean
    picks?: boolean
  }, ExtArgs["result"]["draft_capital"]>

  export type draft_capitalSelectScalar = {
    id?: boolean
    team_name?: boolean
    picks?: boolean
  }


  export type $draft_capitalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "draft_capital"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      team_name: string
      picks: number[]
    }, ExtArgs["result"]["draft_capital"]>
    composites: {}
  }

  type draft_capitalGetPayload<S extends boolean | null | undefined | draft_capitalDefaultArgs> = $Result.GetResult<Prisma.$draft_capitalPayload, S>

  type draft_capitalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<draft_capitalFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Draft_capitalCountAggregateInputType | true
    }

  export interface draft_capitalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['draft_capital'], meta: { name: 'draft_capital' } }
    /**
     * Find zero or one Draft_capital that matches the filter.
     * @param {draft_capitalFindUniqueArgs} args - Arguments to find a Draft_capital
     * @example
     * // Get one Draft_capital
     * const draft_capital = await prisma.draft_capital.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends draft_capitalFindUniqueArgs>(args: SelectSubset<T, draft_capitalFindUniqueArgs<ExtArgs>>): Prisma__draft_capitalClient<$Result.GetResult<Prisma.$draft_capitalPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Draft_capital that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {draft_capitalFindUniqueOrThrowArgs} args - Arguments to find a Draft_capital
     * @example
     * // Get one Draft_capital
     * const draft_capital = await prisma.draft_capital.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends draft_capitalFindUniqueOrThrowArgs>(args: SelectSubset<T, draft_capitalFindUniqueOrThrowArgs<ExtArgs>>): Prisma__draft_capitalClient<$Result.GetResult<Prisma.$draft_capitalPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Draft_capital that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {draft_capitalFindFirstArgs} args - Arguments to find a Draft_capital
     * @example
     * // Get one Draft_capital
     * const draft_capital = await prisma.draft_capital.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends draft_capitalFindFirstArgs>(args?: SelectSubset<T, draft_capitalFindFirstArgs<ExtArgs>>): Prisma__draft_capitalClient<$Result.GetResult<Prisma.$draft_capitalPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Draft_capital that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {draft_capitalFindFirstOrThrowArgs} args - Arguments to find a Draft_capital
     * @example
     * // Get one Draft_capital
     * const draft_capital = await prisma.draft_capital.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends draft_capitalFindFirstOrThrowArgs>(args?: SelectSubset<T, draft_capitalFindFirstOrThrowArgs<ExtArgs>>): Prisma__draft_capitalClient<$Result.GetResult<Prisma.$draft_capitalPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Draft_capitals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {draft_capitalFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Draft_capitals
     * const draft_capitals = await prisma.draft_capital.findMany()
     * 
     * // Get first 10 Draft_capitals
     * const draft_capitals = await prisma.draft_capital.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const draft_capitalWithIdOnly = await prisma.draft_capital.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends draft_capitalFindManyArgs>(args?: SelectSubset<T, draft_capitalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$draft_capitalPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Draft_capital.
     * @param {draft_capitalCreateArgs} args - Arguments to create a Draft_capital.
     * @example
     * // Create one Draft_capital
     * const Draft_capital = await prisma.draft_capital.create({
     *   data: {
     *     // ... data to create a Draft_capital
     *   }
     * })
     * 
     */
    create<T extends draft_capitalCreateArgs>(args: SelectSubset<T, draft_capitalCreateArgs<ExtArgs>>): Prisma__draft_capitalClient<$Result.GetResult<Prisma.$draft_capitalPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Draft_capitals.
     * @param {draft_capitalCreateManyArgs} args - Arguments to create many Draft_capitals.
     * @example
     * // Create many Draft_capitals
     * const draft_capital = await prisma.draft_capital.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends draft_capitalCreateManyArgs>(args?: SelectSubset<T, draft_capitalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Draft_capitals and returns the data saved in the database.
     * @param {draft_capitalCreateManyAndReturnArgs} args - Arguments to create many Draft_capitals.
     * @example
     * // Create many Draft_capitals
     * const draft_capital = await prisma.draft_capital.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Draft_capitals and only return the `id`
     * const draft_capitalWithIdOnly = await prisma.draft_capital.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends draft_capitalCreateManyAndReturnArgs>(args?: SelectSubset<T, draft_capitalCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$draft_capitalPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Draft_capital.
     * @param {draft_capitalDeleteArgs} args - Arguments to delete one Draft_capital.
     * @example
     * // Delete one Draft_capital
     * const Draft_capital = await prisma.draft_capital.delete({
     *   where: {
     *     // ... filter to delete one Draft_capital
     *   }
     * })
     * 
     */
    delete<T extends draft_capitalDeleteArgs>(args: SelectSubset<T, draft_capitalDeleteArgs<ExtArgs>>): Prisma__draft_capitalClient<$Result.GetResult<Prisma.$draft_capitalPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Draft_capital.
     * @param {draft_capitalUpdateArgs} args - Arguments to update one Draft_capital.
     * @example
     * // Update one Draft_capital
     * const draft_capital = await prisma.draft_capital.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends draft_capitalUpdateArgs>(args: SelectSubset<T, draft_capitalUpdateArgs<ExtArgs>>): Prisma__draft_capitalClient<$Result.GetResult<Prisma.$draft_capitalPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Draft_capitals.
     * @param {draft_capitalDeleteManyArgs} args - Arguments to filter Draft_capitals to delete.
     * @example
     * // Delete a few Draft_capitals
     * const { count } = await prisma.draft_capital.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends draft_capitalDeleteManyArgs>(args?: SelectSubset<T, draft_capitalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Draft_capitals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {draft_capitalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Draft_capitals
     * const draft_capital = await prisma.draft_capital.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends draft_capitalUpdateManyArgs>(args: SelectSubset<T, draft_capitalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Draft_capital.
     * @param {draft_capitalUpsertArgs} args - Arguments to update or create a Draft_capital.
     * @example
     * // Update or create a Draft_capital
     * const draft_capital = await prisma.draft_capital.upsert({
     *   create: {
     *     // ... data to create a Draft_capital
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Draft_capital we want to update
     *   }
     * })
     */
    upsert<T extends draft_capitalUpsertArgs>(args: SelectSubset<T, draft_capitalUpsertArgs<ExtArgs>>): Prisma__draft_capitalClient<$Result.GetResult<Prisma.$draft_capitalPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Draft_capitals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {draft_capitalCountArgs} args - Arguments to filter Draft_capitals to count.
     * @example
     * // Count the number of Draft_capitals
     * const count = await prisma.draft_capital.count({
     *   where: {
     *     // ... the filter for the Draft_capitals we want to count
     *   }
     * })
    **/
    count<T extends draft_capitalCountArgs>(
      args?: Subset<T, draft_capitalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Draft_capitalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Draft_capital.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Draft_capitalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Draft_capitalAggregateArgs>(args: Subset<T, Draft_capitalAggregateArgs>): Prisma.PrismaPromise<GetDraft_capitalAggregateType<T>>

    /**
     * Group by Draft_capital.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {draft_capitalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends draft_capitalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: draft_capitalGroupByArgs['orderBy'] }
        : { orderBy?: draft_capitalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, draft_capitalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDraft_capitalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the draft_capital model
   */
  readonly fields: draft_capitalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for draft_capital.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__draft_capitalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the draft_capital model
   */ 
  interface draft_capitalFieldRefs {
    readonly id: FieldRef<"draft_capital", 'Int'>
    readonly team_name: FieldRef<"draft_capital", 'String'>
    readonly picks: FieldRef<"draft_capital", 'Int[]'>
  }
    

  // Custom InputTypes
  /**
   * draft_capital findUnique
   */
  export type draft_capitalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the draft_capital
     */
    select?: draft_capitalSelect<ExtArgs> | null
    /**
     * Filter, which draft_capital to fetch.
     */
    where: draft_capitalWhereUniqueInput
  }

  /**
   * draft_capital findUniqueOrThrow
   */
  export type draft_capitalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the draft_capital
     */
    select?: draft_capitalSelect<ExtArgs> | null
    /**
     * Filter, which draft_capital to fetch.
     */
    where: draft_capitalWhereUniqueInput
  }

  /**
   * draft_capital findFirst
   */
  export type draft_capitalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the draft_capital
     */
    select?: draft_capitalSelect<ExtArgs> | null
    /**
     * Filter, which draft_capital to fetch.
     */
    where?: draft_capitalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of draft_capitals to fetch.
     */
    orderBy?: draft_capitalOrderByWithRelationInput | draft_capitalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for draft_capitals.
     */
    cursor?: draft_capitalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` draft_capitals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` draft_capitals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of draft_capitals.
     */
    distinct?: Draft_capitalScalarFieldEnum | Draft_capitalScalarFieldEnum[]
  }

  /**
   * draft_capital findFirstOrThrow
   */
  export type draft_capitalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the draft_capital
     */
    select?: draft_capitalSelect<ExtArgs> | null
    /**
     * Filter, which draft_capital to fetch.
     */
    where?: draft_capitalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of draft_capitals to fetch.
     */
    orderBy?: draft_capitalOrderByWithRelationInput | draft_capitalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for draft_capitals.
     */
    cursor?: draft_capitalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` draft_capitals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` draft_capitals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of draft_capitals.
     */
    distinct?: Draft_capitalScalarFieldEnum | Draft_capitalScalarFieldEnum[]
  }

  /**
   * draft_capital findMany
   */
  export type draft_capitalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the draft_capital
     */
    select?: draft_capitalSelect<ExtArgs> | null
    /**
     * Filter, which draft_capitals to fetch.
     */
    where?: draft_capitalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of draft_capitals to fetch.
     */
    orderBy?: draft_capitalOrderByWithRelationInput | draft_capitalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing draft_capitals.
     */
    cursor?: draft_capitalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` draft_capitals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` draft_capitals.
     */
    skip?: number
    distinct?: Draft_capitalScalarFieldEnum | Draft_capitalScalarFieldEnum[]
  }

  /**
   * draft_capital create
   */
  export type draft_capitalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the draft_capital
     */
    select?: draft_capitalSelect<ExtArgs> | null
    /**
     * The data needed to create a draft_capital.
     */
    data: XOR<draft_capitalCreateInput, draft_capitalUncheckedCreateInput>
  }

  /**
   * draft_capital createMany
   */
  export type draft_capitalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many draft_capitals.
     */
    data: draft_capitalCreateManyInput | draft_capitalCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * draft_capital createManyAndReturn
   */
  export type draft_capitalCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the draft_capital
     */
    select?: draft_capitalSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many draft_capitals.
     */
    data: draft_capitalCreateManyInput | draft_capitalCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * draft_capital update
   */
  export type draft_capitalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the draft_capital
     */
    select?: draft_capitalSelect<ExtArgs> | null
    /**
     * The data needed to update a draft_capital.
     */
    data: XOR<draft_capitalUpdateInput, draft_capitalUncheckedUpdateInput>
    /**
     * Choose, which draft_capital to update.
     */
    where: draft_capitalWhereUniqueInput
  }

  /**
   * draft_capital updateMany
   */
  export type draft_capitalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update draft_capitals.
     */
    data: XOR<draft_capitalUpdateManyMutationInput, draft_capitalUncheckedUpdateManyInput>
    /**
     * Filter which draft_capitals to update
     */
    where?: draft_capitalWhereInput
  }

  /**
   * draft_capital upsert
   */
  export type draft_capitalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the draft_capital
     */
    select?: draft_capitalSelect<ExtArgs> | null
    /**
     * The filter to search for the draft_capital to update in case it exists.
     */
    where: draft_capitalWhereUniqueInput
    /**
     * In case the draft_capital found by the `where` argument doesn't exist, create a new draft_capital with this data.
     */
    create: XOR<draft_capitalCreateInput, draft_capitalUncheckedCreateInput>
    /**
     * In case the draft_capital was found with the provided `where` argument, update it with this data.
     */
    update: XOR<draft_capitalUpdateInput, draft_capitalUncheckedUpdateInput>
  }

  /**
   * draft_capital delete
   */
  export type draft_capitalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the draft_capital
     */
    select?: draft_capitalSelect<ExtArgs> | null
    /**
     * Filter which draft_capital to delete.
     */
    where: draft_capitalWhereUniqueInput
  }

  /**
   * draft_capital deleteMany
   */
  export type draft_capitalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which draft_capitals to delete
     */
    where?: draft_capitalWhereInput
  }

  /**
   * draft_capital without action
   */
  export type draft_capitalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the draft_capital
     */
    select?: draft_capitalSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const Draft_orderScalarFieldEnum: {
    id: 'id',
    team_name: 'team_name',
    pick_number: 'pick_number'
  };

  export type Draft_orderScalarFieldEnum = (typeof Draft_orderScalarFieldEnum)[keyof typeof Draft_orderScalarFieldEnum]


  export const ProspectsScalarFieldEnum: {
    id: 'id',
    position: 'position',
    ranking: 'ranking',
    name: 'name'
  };

  export type ProspectsScalarFieldEnum = (typeof ProspectsScalarFieldEnum)[keyof typeof ProspectsScalarFieldEnum]


  export const Draft_capitalScalarFieldEnum: {
    id: 'id',
    team_name: 'team_name',
    picks: 'picks'
  };

  export type Draft_capitalScalarFieldEnum = (typeof Draft_capitalScalarFieldEnum)[keyof typeof Draft_capitalScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type draft_orderWhereInput = {
    AND?: draft_orderWhereInput | draft_orderWhereInput[]
    OR?: draft_orderWhereInput[]
    NOT?: draft_orderWhereInput | draft_orderWhereInput[]
    id?: IntFilter<"draft_order"> | number
    team_name?: StringNullableFilter<"draft_order"> | string | null
    pick_number?: IntNullableFilter<"draft_order"> | number | null
  }

  export type draft_orderOrderByWithRelationInput = {
    id?: SortOrder
    team_name?: SortOrderInput | SortOrder
    pick_number?: SortOrderInput | SortOrder
  }

  export type draft_orderWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: draft_orderWhereInput | draft_orderWhereInput[]
    OR?: draft_orderWhereInput[]
    NOT?: draft_orderWhereInput | draft_orderWhereInput[]
    team_name?: StringNullableFilter<"draft_order"> | string | null
    pick_number?: IntNullableFilter<"draft_order"> | number | null
  }, "id">

  export type draft_orderOrderByWithAggregationInput = {
    id?: SortOrder
    team_name?: SortOrderInput | SortOrder
    pick_number?: SortOrderInput | SortOrder
    _count?: draft_orderCountOrderByAggregateInput
    _avg?: draft_orderAvgOrderByAggregateInput
    _max?: draft_orderMaxOrderByAggregateInput
    _min?: draft_orderMinOrderByAggregateInput
    _sum?: draft_orderSumOrderByAggregateInput
  }

  export type draft_orderScalarWhereWithAggregatesInput = {
    AND?: draft_orderScalarWhereWithAggregatesInput | draft_orderScalarWhereWithAggregatesInput[]
    OR?: draft_orderScalarWhereWithAggregatesInput[]
    NOT?: draft_orderScalarWhereWithAggregatesInput | draft_orderScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"draft_order"> | number
    team_name?: StringNullableWithAggregatesFilter<"draft_order"> | string | null
    pick_number?: IntNullableWithAggregatesFilter<"draft_order"> | number | null
  }

  export type prospectsWhereInput = {
    AND?: prospectsWhereInput | prospectsWhereInput[]
    OR?: prospectsWhereInput[]
    NOT?: prospectsWhereInput | prospectsWhereInput[]
    id?: IntFilter<"prospects"> | number
    position?: StringNullableFilter<"prospects"> | string | null
    ranking?: IntNullableFilter<"prospects"> | number | null
    name?: StringNullableFilter<"prospects"> | string | null
  }

  export type prospectsOrderByWithRelationInput = {
    id?: SortOrder
    position?: SortOrderInput | SortOrder
    ranking?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
  }

  export type prospectsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: prospectsWhereInput | prospectsWhereInput[]
    OR?: prospectsWhereInput[]
    NOT?: prospectsWhereInput | prospectsWhereInput[]
    position?: StringNullableFilter<"prospects"> | string | null
    ranking?: IntNullableFilter<"prospects"> | number | null
    name?: StringNullableFilter<"prospects"> | string | null
  }, "id">

  export type prospectsOrderByWithAggregationInput = {
    id?: SortOrder
    position?: SortOrderInput | SortOrder
    ranking?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    _count?: prospectsCountOrderByAggregateInput
    _avg?: prospectsAvgOrderByAggregateInput
    _max?: prospectsMaxOrderByAggregateInput
    _min?: prospectsMinOrderByAggregateInput
    _sum?: prospectsSumOrderByAggregateInput
  }

  export type prospectsScalarWhereWithAggregatesInput = {
    AND?: prospectsScalarWhereWithAggregatesInput | prospectsScalarWhereWithAggregatesInput[]
    OR?: prospectsScalarWhereWithAggregatesInput[]
    NOT?: prospectsScalarWhereWithAggregatesInput | prospectsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"prospects"> | number
    position?: StringNullableWithAggregatesFilter<"prospects"> | string | null
    ranking?: IntNullableWithAggregatesFilter<"prospects"> | number | null
    name?: StringNullableWithAggregatesFilter<"prospects"> | string | null
  }

  export type draft_capitalWhereInput = {
    AND?: draft_capitalWhereInput | draft_capitalWhereInput[]
    OR?: draft_capitalWhereInput[]
    NOT?: draft_capitalWhereInput | draft_capitalWhereInput[]
    id?: IntFilter<"draft_capital"> | number
    team_name?: StringFilter<"draft_capital"> | string
    picks?: IntNullableListFilter<"draft_capital">
  }

  export type draft_capitalOrderByWithRelationInput = {
    id?: SortOrder
    team_name?: SortOrder
    picks?: SortOrder
  }

  export type draft_capitalWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: draft_capitalWhereInput | draft_capitalWhereInput[]
    OR?: draft_capitalWhereInput[]
    NOT?: draft_capitalWhereInput | draft_capitalWhereInput[]
    team_name?: StringFilter<"draft_capital"> | string
    picks?: IntNullableListFilter<"draft_capital">
  }, "id">

  export type draft_capitalOrderByWithAggregationInput = {
    id?: SortOrder
    team_name?: SortOrder
    picks?: SortOrder
    _count?: draft_capitalCountOrderByAggregateInput
    _avg?: draft_capitalAvgOrderByAggregateInput
    _max?: draft_capitalMaxOrderByAggregateInput
    _min?: draft_capitalMinOrderByAggregateInput
    _sum?: draft_capitalSumOrderByAggregateInput
  }

  export type draft_capitalScalarWhereWithAggregatesInput = {
    AND?: draft_capitalScalarWhereWithAggregatesInput | draft_capitalScalarWhereWithAggregatesInput[]
    OR?: draft_capitalScalarWhereWithAggregatesInput[]
    NOT?: draft_capitalScalarWhereWithAggregatesInput | draft_capitalScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"draft_capital"> | number
    team_name?: StringWithAggregatesFilter<"draft_capital"> | string
    picks?: IntNullableListFilter<"draft_capital">
  }

  export type draft_orderCreateInput = {
    team_name?: string | null
    pick_number?: number | null
  }

  export type draft_orderUncheckedCreateInput = {
    id?: number
    team_name?: string | null
    pick_number?: number | null
  }

  export type draft_orderUpdateInput = {
    team_name?: NullableStringFieldUpdateOperationsInput | string | null
    pick_number?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type draft_orderUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_name?: NullableStringFieldUpdateOperationsInput | string | null
    pick_number?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type draft_orderCreateManyInput = {
    id?: number
    team_name?: string | null
    pick_number?: number | null
  }

  export type draft_orderUpdateManyMutationInput = {
    team_name?: NullableStringFieldUpdateOperationsInput | string | null
    pick_number?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type draft_orderUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_name?: NullableStringFieldUpdateOperationsInput | string | null
    pick_number?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type prospectsCreateInput = {
    position?: string | null
    ranking?: number | null
    name?: string | null
  }

  export type prospectsUncheckedCreateInput = {
    id?: number
    position?: string | null
    ranking?: number | null
    name?: string | null
  }

  export type prospectsUpdateInput = {
    position?: NullableStringFieldUpdateOperationsInput | string | null
    ranking?: NullableIntFieldUpdateOperationsInput | number | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type prospectsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    position?: NullableStringFieldUpdateOperationsInput | string | null
    ranking?: NullableIntFieldUpdateOperationsInput | number | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type prospectsCreateManyInput = {
    id?: number
    position?: string | null
    ranking?: number | null
    name?: string | null
  }

  export type prospectsUpdateManyMutationInput = {
    position?: NullableStringFieldUpdateOperationsInput | string | null
    ranking?: NullableIntFieldUpdateOperationsInput | number | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type prospectsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    position?: NullableStringFieldUpdateOperationsInput | string | null
    ranking?: NullableIntFieldUpdateOperationsInput | number | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type draft_capitalCreateInput = {
    team_name: string
    picks?: draft_capitalCreatepicksInput | number[]
  }

  export type draft_capitalUncheckedCreateInput = {
    id?: number
    team_name: string
    picks?: draft_capitalCreatepicksInput | number[]
  }

  export type draft_capitalUpdateInput = {
    team_name?: StringFieldUpdateOperationsInput | string
    picks?: draft_capitalUpdatepicksInput | number[]
  }

  export type draft_capitalUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_name?: StringFieldUpdateOperationsInput | string
    picks?: draft_capitalUpdatepicksInput | number[]
  }

  export type draft_capitalCreateManyInput = {
    id?: number
    team_name: string
    picks?: draft_capitalCreatepicksInput | number[]
  }

  export type draft_capitalUpdateManyMutationInput = {
    team_name?: StringFieldUpdateOperationsInput | string
    picks?: draft_capitalUpdatepicksInput | number[]
  }

  export type draft_capitalUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_name?: StringFieldUpdateOperationsInput | string
    picks?: draft_capitalUpdatepicksInput | number[]
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type draft_orderCountOrderByAggregateInput = {
    id?: SortOrder
    team_name?: SortOrder
    pick_number?: SortOrder
  }

  export type draft_orderAvgOrderByAggregateInput = {
    id?: SortOrder
    pick_number?: SortOrder
  }

  export type draft_orderMaxOrderByAggregateInput = {
    id?: SortOrder
    team_name?: SortOrder
    pick_number?: SortOrder
  }

  export type draft_orderMinOrderByAggregateInput = {
    id?: SortOrder
    team_name?: SortOrder
    pick_number?: SortOrder
  }

  export type draft_orderSumOrderByAggregateInput = {
    id?: SortOrder
    pick_number?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type prospectsCountOrderByAggregateInput = {
    id?: SortOrder
    position?: SortOrder
    ranking?: SortOrder
    name?: SortOrder
  }

  export type prospectsAvgOrderByAggregateInput = {
    id?: SortOrder
    ranking?: SortOrder
  }

  export type prospectsMaxOrderByAggregateInput = {
    id?: SortOrder
    position?: SortOrder
    ranking?: SortOrder
    name?: SortOrder
  }

  export type prospectsMinOrderByAggregateInput = {
    id?: SortOrder
    position?: SortOrder
    ranking?: SortOrder
    name?: SortOrder
  }

  export type prospectsSumOrderByAggregateInput = {
    id?: SortOrder
    ranking?: SortOrder
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntNullableListFilter<$PrismaModel = never> = {
    equals?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    has?: number | IntFieldRefInput<$PrismaModel> | null
    hasEvery?: number[] | ListIntFieldRefInput<$PrismaModel>
    hasSome?: number[] | ListIntFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type draft_capitalCountOrderByAggregateInput = {
    id?: SortOrder
    team_name?: SortOrder
    picks?: SortOrder
  }

  export type draft_capitalAvgOrderByAggregateInput = {
    id?: SortOrder
    picks?: SortOrder
  }

  export type draft_capitalMaxOrderByAggregateInput = {
    id?: SortOrder
    team_name?: SortOrder
  }

  export type draft_capitalMinOrderByAggregateInput = {
    id?: SortOrder
    team_name?: SortOrder
  }

  export type draft_capitalSumOrderByAggregateInput = {
    id?: SortOrder
    picks?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type draft_capitalCreatepicksInput = {
    set: number[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type draft_capitalUpdatepicksInput = {
    set?: number[]
    push?: number | number[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use draft_orderDefaultArgs instead
     */
    export type draft_orderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = draft_orderDefaultArgs<ExtArgs>
    /**
     * @deprecated Use prospectsDefaultArgs instead
     */
    export type prospectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = prospectsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use draft_capitalDefaultArgs instead
     */
    export type draft_capitalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = draft_capitalDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}